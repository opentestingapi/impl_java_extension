package org.opentesting.services.adapter.myadapter;

import org.opentesting.services.adapter.Adapter;
import org.opentesting.services.execution.dto.TestCaseCheckDTO;
import org.opentesting.services.execution.dto.TestCaseDTO;
import org.opentesting.services.execution.dto.TestCaseInjectionDTO;
import org.opentesting.services.execution.dto.TestCaseRandomDataDTO;
import org.opentesting.util.LogExecutionTime;

import org.springframework.stereotype.Controller;

import lombok.extern.slf4j.Slf4j;

@Controller
@Slf4j
public class MyAdapter extends Adapter {

    @Override
    public String getServicename() {
        return "myadapter";
    }

    /**
     * execute inject
     */
    @Override
    @LogExecutionTime
    public boolean inject(String testid, TestCaseInjectionDTO inject, TestCaseRandomDataDTO randomdata) {
        try {
            log.warn(getServicename()+" inject not implemented");
            return false;
        } catch (Exception e) {
            log.error("inject failed", e);
            return false;
        }
    }

    /**
     * execute check
     */
    @Override
    @LogExecutionTime
    public boolean check(TestCaseCheckDTO check, Object... args) {
        try {
            log.warn(getServicename()+" check not implemented");
            return false;
        } catch (Exception e) {
            log.error("check failed", e);
            return false;
        }
    }

    /**
     * create required components 
     */
    @Override
    @LogExecutionTime
    public void createRequiredComponents(TestCaseDTO test) {
        // your stuff, for example one-time timer creation for regular processing of open checks       
    }
    
    /**
     * pause method override to start and stop my components (by label, "all" will be the label for all tests)
     * OPTIONAL!
     */
    @Override
    public void pause(boolean pause, String byLabel) {
        //handle your components
    }
    
}

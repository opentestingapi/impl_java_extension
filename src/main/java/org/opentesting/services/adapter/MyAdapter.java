package org.opentesting.services.adapter;

import java.util.logging.Level;
import java.util.logging.Logger;

import org.opentesting.dto.TestCaseCheckDTO;
import org.opentesting.dto.TestCaseDTO;
import org.opentesting.dto.TestCaseInjectionDTO;
import org.opentesting.util.ApplicationContextProvider;
import org.opentesting.util.LogExecutionTime;

import org.springframework.stereotype.Controller;

@Controller
public class MyAdapter extends Adapter {

    private static final Logger LOGGER = Logger.getLogger(MyAdapter.class.getName());
	
    public MyAdapter(ApplicationContextProvider applicationContextProvider) {
        super(applicationContextProvider);
    }

    @Override
    public String getServicename() {
        return "myadapter";
    }

    /**
     * execute inject
     */
    @Override
    @LogExecutionTime
    public boolean inject(String testid, TestCaseInjectionDTO inject) {
        try {
            LOGGER.info(getServicename()+" inject not implemented");
            return false;
        } catch (Exception e) {            
            LOGGER.log(Level.SEVERE, "inject failed", e);
            return false;
        }
    }

    /**
     * execute check
     */
    @Override
    @LogExecutionTime
    public boolean check(String testid, TestCaseCheckDTO check, Object... args) {
        try {
            LOGGER.info(getServicename()+" check not implemented");
            return false;
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "check failed", e);
            return false;
        }
    }

    /**
     * create required components 
     */
    @Override
    @LogExecutionTime
    public void createRequiredComponents(TestCaseDTO test) {
        // your stuff, for example one-time timer creation for regular processing of open checks       
    }
    
    /**
     * pause method override to start and stop my components (by label, "all" will be the label for all tests)
     * OPTIONAL!
     */
    @Override
    public void pause(boolean pause, String byLabel) {
        //handle your components
    }
    
}